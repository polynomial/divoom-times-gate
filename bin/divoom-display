#!/usr/bin/env python3

"""Display custom content on Divoom Times Gate."""

import argparse
import asyncio
import sys
from divoom_timesgate import TimesGateDevice, TextDisplayItem, DateTimeDisplayItem


async def display_text(ip, text, panel, color, font, x, y):
    """Display simple text."""
    async with TimesGateDevice(ip) as device:
        response = await device.create_text_display(
            text=text,
            panel=panel,
            x=x,
            y=y,
            color=color,
            font=font
        )
        if response.get('error_code', 0) == 0:
            print(f"Text displayed on panel {panel}")
        else:
            print(f"Failed to display text: {response}")


async def display_composite(ip, panel):
    """Display composite layout with text and date."""
    async with TimesGateDevice(ip) as device:
        items = [
            TextDisplayItem(
                text_id=1,
                text="Times Gate",
                x=0,
                y=10,
                color="#FF0000",
                font=2,
                speed=50  # Scrolling
            ),
            TextDisplayItem(
                text_id=2,
                text="Python API",
                x=0,
                y=30,
                color="#00FF00",
                font=1,
                speed=0  # Static
            ),
            DateTimeDisplayItem(
                text_id=3,
                x=0,
                y=48,
                color="#FFFF00",
                font=0
            )
        ]
        
        response = await device.create_multi_item_display(
            items=items,
            panel=panel
        )
        
        if response.get('error_code', 0) == 0:
            print(f"Composite display created on panel {panel}")
        else:
            print(f"Failed to create display: {response}")


def main():
    parser = argparse.ArgumentParser(description='Display custom content on Divoom Times Gate')
    parser.add_argument('--ip', required=True, help='IP address of the device')
    
    subparsers = parser.add_subparsers(dest='command', help='Command to execute')
    
    # Text command
    text_parser = subparsers.add_parser('text', help='Display simple text')
    text_parser.add_argument('text', help='Text to display')
    text_parser.add_argument('--panel', type=int, default=1, choices=[1,2,3,4,5],
                           help='Panel to display on (1-5, default: 1)')
    text_parser.add_argument('--color', default='#FFFFFF',
                           help='Text color in hex (default: #FFFFFF)')
    text_parser.add_argument('--font', type=int, default=2, choices=[0,1,2,3,4],
                           help='Font size (0-4, default: 2)')
    text_parser.add_argument('--x', type=int, default=0,
                           help='X position (default: 0)')
    text_parser.add_argument('--y', type=int, default=24,
                           help='Y position (default: 24)')
    
    # Composite command
    comp_parser = subparsers.add_parser('composite', help='Display composite layout')
    comp_parser.add_argument('--panel', type=int, default=1, choices=[1,2,3,4,5],
                           help='Panel to display on (1-5, default: 1)')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    if args.command == 'text':
        asyncio.run(display_text(
            args.ip, args.text, args.panel, 
            args.color, args.font, args.x, args.y
        ))
    elif args.command == 'composite':
        asyncio.run(display_composite(args.ip, args.panel))


if __name__ == '__main__':
    main() 