#!/usr/bin/env python3
"""
Control Divoom Times Gate weather display.
"""

import sys
import os
import asyncio
import argparse

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from divoom_timesgate import TimesGateDevice, TemperatureMode


# Major city coordinates
CITY_COORDS = {
    "new york": (40.7128, -74.0060),
    "london": (51.5074, -0.1278),
    "paris": (48.8566, 2.3522),
    "tokyo": (35.6762, 139.6503),
    "sydney": (-33.8688, 151.2093),
    "san francisco": (37.7749, -122.4194),
    "los angeles": (34.0522, -118.2437),
    "chicago": (41.8781, -87.6298),
    "toronto": (43.6532, -79.3832),
    "vancouver": (49.2827, -123.1207),
    "berlin": (52.5200, 13.4050),
    "moscow": (55.7558, 37.6173),
    "beijing": (39.9042, 116.4074),
    "shanghai": (31.2304, 121.4737),
    "singapore": (1.3521, 103.8198),
    "dubai": (25.2048, 55.2708),
    "mumbai": (19.0760, 72.8777),
    "hong kong": (22.3193, 114.1694),
    "seoul": (37.5665, 126.9780),
    "bangkok": (13.7563, 100.5018),
}


async def main():
    parser = argparse.ArgumentParser(description='Control Divoom Times Gate weather display')
    parser.add_argument('--ip', default=os.environ.get('DIVOOM_TIMES_GATE_IP', '192.168.68.50'),
                        help='Device IP address')
    parser.add_argument('--city', help='City name (e.g., "new york", "london")')
    parser.add_argument('--lat', type=float, help='Latitude coordinate')
    parser.add_argument('--lon', type=float, help='Longitude coordinate')
    parser.add_argument('--celsius', action='store_true', help='Set temperature to Celsius')
    parser.add_argument('--fahrenheit', action='store_true', help='Set temperature to Fahrenheit')
    
    args = parser.parse_args()
    
    async with TimesGateDevice(args.ip) as device:
        # Set temperature mode if specified
        if args.celsius:
            print("Setting temperature mode to Celsius...")
            await device.set_temperature_mode(TemperatureMode.CELSIUS)
            print("✓ Temperature mode set to Celsius")
        elif args.fahrenheit:
            print("Setting temperature mode to Fahrenheit...")
            await device.set_temperature_mode(TemperatureMode.FAHRENHEIT)
            print("✓ Temperature mode set to Fahrenheit")
        
        # Set location
        if args.city:
            city_lower = args.city.lower()
            if city_lower in CITY_COORDS:
                lat, lon = CITY_COORDS[city_lower]
                print(f"Setting weather location to {args.city.title()} ({lat}, {lon})...")
                await device.set_weather_location(lat, lon)
                print(f"✓ Weather location set to {args.city.title()}")
            else:
                print(f"Error: Unknown city '{args.city}'")
                print(f"Available cities: {', '.join(sorted(CITY_COORDS.keys()))}")
                sys.exit(1)
        elif args.lat is not None and args.lon is not None:
            print(f"Setting weather location to ({args.lat}, {args.lon})...")
            await device.set_weather_location(args.lat, args.lon)
            print("✓ Weather location set")
        elif not (args.celsius or args.fahrenheit):
            # If no specific action, show current settings
            settings = await device.get_settings()
            temp_mode = "Celsius" if settings.get('TemperatureMode', 0) == 0 else "Fahrenheit"
            print(f"Current temperature mode: {temp_mode}")
            print("\nTo set location, use:")
            print("  --city <city_name>  (e.g., --city 'new york')")
            print("  --lat <latitude> --lon <longitude>")
            print(f"\nAvailable cities: {', '.join(sorted(CITY_COORDS.keys()))}")


if __name__ == "__main__":
    asyncio.run(main()) 